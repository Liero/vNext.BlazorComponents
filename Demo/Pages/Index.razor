@page "/"
@using vNext.BlazorComponents.Grid
@using vNext.BlazorComponents.Demo.Data;

<h1>Hello, world!</h1>
<EditForm EditContext="_editContext" Context="model">
    <DataAnnotationsValidator />


    <div class="text-right">
        Total Volume:
        @_products?.Sum(p => p.Volume / 1000).ToString("f3")

        <span class="ml-3">Total Volume explicit container:</span>
        <Container @ref="_totalVolumeExplicit" ExplicitRefresh="true">
            @_products?.Sum(p => p.Volume / 1000).ToString("f3")
        </Container>
        <IconButton IconClass="oi oi-reload" class="btn btn-outline-primary" @onclick="_ => _totalVolumeExplicit.Refresh()">Refresh</IconButton>
    </div>
    <div style="height: 500px">

        <SimpleGrid TRow="Product" Items="_products" style="height: 100%" @ref="_grid">
            <ColumnDef TRow="Product" Header="Id">
                @context.Id
            </ColumnDef>
            <ColumnDef TRow="Product" Header="Name">
                <InputText @bind-Value="context.Name" />
            </ColumnDef>
            <ColumnDef TRow="Product" Header="Length">
                <InputNumber @bind-Value="context.Length" />
            </ColumnDef>
            <ColumnDef TRow="Product" Header="Width">
                <InputNumber @bind-Value="context.Width" />
            </ColumnDef>
            <ColumnDef TRow="Product" Header="Height">
                <InputNumber @bind-Value="context.Height" />
            </ColumnDef>
            <ColumnDef TRow="Product" Header="Volume" CellClass="text-right"
                       CellClassSelector="@(data => data.Volume > 100 ? "bg-danger" : "bg-success")">
                @((context.Volume / 1000).ToString("f3")) m<sup>3</sup>
            </ColumnDef>
        </SimpleGrid>

        <button type="button" @onclick="Reload">Reload</button>
    </div>
    <ValidationSummary />
</EditForm>

@code
{
    [Inject] ProductsService ProductsService { get; set; }

    Product[] _products;
    SimpleGrid<Product> _grid;
    Container _totalVolume;
    Container _totalVolumeExplicit;
    EditContext _editContext;

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(this);
        _editContext.OnFieldChanged += OnFieldChanged;
        await Reload();
    }

    protected async Task Reload()
    {
        _products = await ProductsService.GetProducts();
        _totalVolumeExplicit.Refresh();
    }

    void OnFieldChanged(object sender, FieldChangedEventArgs args)
    {
        if (args.FieldIdentifier.Model is Product product)
        {
            _grid.FindRow(product)?.Refresh();

            switch (args.FieldIdentifier.FieldName)
            {
                case nameof(Product.Height):
                case nameof(Product.Width):
                case nameof(Product.Length):
                    // _totalVolume.Refresh();
                    break;
            }
        }
    }
}
