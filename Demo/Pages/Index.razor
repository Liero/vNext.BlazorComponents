@page "/"
@using vNext.BlazorComponents.Grid
@using vNext.BlazorComponents.Demo.Data;

<h1>SimpleGrid demo</h1>
<EditForm EditContext="_editContext" Context="model">
    <DataAnnotationsValidator />


    <div class="text-right">
        Total Volume:
        @_products?.Sum(p => p.Volume / 1000).ToString("f3")

        <span class="ml-3">Total Volume explicit container:</span>
        <Container @ref="_totalVolumeExplicit" ExplicitRefresh="true">
            @_products?.Sum(p => p.Volume / 1000).ToString("f3")
        </Container>
        <IconButton IconClass="oi oi-reload" class="btn btn-outline-primary" @onclick="_ => _totalVolumeExplicit.Refresh()">Refresh</IconButton>
    </div>
    <div style="height: 500px">

        <SimpleGrid TRow="Product" Items="_products" style="height: 100%" FrozenColumns="2"
                    OnRowClick="OnRowClick" OnRowContextMenu="OnRowContextMenu"
                    @ref="_grid"
                    @key="_moreColumns">
            <ColumnDef TRow="Product" Header="Id" Width="3em">
                @{ Console.WriteLine("ID"); }
                @context.Id
            </ColumnDef>
            <ColumnDef TRow="Product" Header="Name" Width="minmax(5em, auto)">
                <InputText @bind-Value="context.Name" class="w-100" />
            </ColumnDef>
            <ColumnDef TRow="Product" Header="Length">
                <InputNumber @bind-Value="context.Length" />
            </ColumnDef>
            <ColumnDef TRow="Product" Header="Width">
                <InputNumber @bind-Value="context.Width" />
            </ColumnDef>
            <ColumnDef TRow="Product" Header="Height" Width="100px">
                <InputNumber @bind-Value="context.Height" />
            </ColumnDef>
            <ColumnDef TRow="Product" Header="Volume" CellClass="text-right" Width="min-content"
                       CellClassSelector="@(e => e.Data.Volume > 100 ? "bg-danger" : "bg-success")">
                @((context.Volume / 1000).ToString("f3")) m<sup>3</sup>
            </ColumnDef>

            @if (_moreColumns)
            {
                <ColumnDef TRow="Product" Header="Truncated text" CellClass="text-truncate" Width="200px">
                    <span class="text-truncate">some very looooooooooooooooooooooooong teeeeeeeeeeeeeeeeeeeeeeeeeeeeeext</span>
                </ColumnDef>
                <ColumnDef TRow="Product" Header="Long Text" Width="max-content">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
                </ColumnDef>
            }
        </SimpleGrid>


    </div>
    <button type="button" @onclick="Reload">Reload</button>
    <label><input type="checkbox" @onchange="MoreColumnsChanged" /> Show more columns</label>
    <ValidationSummary />

    <div>Clicked Row: @_clickedRow?.Id</div>
    <div>Right Clicked Row: @_rightClickedRow?.Id</div>
</EditForm>

@code
{
    [Inject] ProductsService ProductsService { get; set; }

    Product[] _products;
    Product _clickedRow;
    Product _rightClickedRow;
    SimpleGrid<Product> _grid;
    Container _totalVolumeExplicit;
    EditContext _editContext;
    private bool _moreColumns = false;

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(this);
        _editContext.OnFieldChanged += OnFieldChanged;
        await Reload();
    }

    private async Task Reload()
    {
        _products = await ProductsService.GetProducts();
        _totalVolumeExplicit.Refresh();
    }

    void MoreColumnsChanged(ChangeEventArgs args)
    {
        _moreColumns = (bool)args.Value;
    }

    void OnFieldChanged(object sender, FieldChangedEventArgs args)
    {
        Console.WriteLine("FieldCanged");
        if (args.FieldIdentifier.Model is Product product)
        {
            _grid.FindRow(product)?.Refresh();
            _grid.FindRow(product)?.Refresh();
            _grid.FindRow(product)?.Refresh();
        }
    }

    void OnRowClick(RowMouseEventArgs<Product> args)
    {
        _clickedRow = (Product)args.Data;
    }
    void OnRowContextMenu(RowMouseEventArgs<Product> args)
    {
        _rightClickedRow = (Product)args.Data;
    }
}
