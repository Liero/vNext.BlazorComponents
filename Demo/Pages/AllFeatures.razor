@page "/allfeatures"
@using System.Linq.Expressions
@using vNext.BlazorComponents.Grid
@using vNext.BlazorComponents.Data
@using vNext.BlazorComponents.Demo.Data
<h1>All features</h1>

<div>
    Filtering / Sorting Mode: 
    <label>
        <input type="radio" checked="@_serverFiltering" name="mode" @onclick="_ => ToggleMode()" />
        Server
    </label>
    <label>
        <input type="radio" checked="@(!_serverFiltering)" name="mode" @onclick="_ => ToggleMode()" />
        In Memory
    </label>
</div>

<AdvancedGrid TRow="Product"
              @ref="_grid"
              Items="_serverFiltering ? null : _products"
              OnRead="_serverFiltering ? OnRead : null"
              OnCreatingFilterPredicate="CustomizeFilter"
              style="height: 500px">
    <ColumnDefEx TRow="Product" Width="3em">
        <button type="button" class="btn btn-link" title="This column is not sortable">...</button>
    </ColumnDefEx>
    <ColumnDefEx TRow="Product" Field="Id" Width="3em" />
    <ColumnDefEx TRow="Product" Field="Category">
        @if (context.Category == "Tool")
        {
            <svg class="text-primary" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 16 16">
                <path d="M1 0 0 1l2.2 3.081a1 1 0 0 0 .815.419h.07a1 1 0 0 1 .708.293l2.675 2.675-2.617 2.654A3.003 3.003 0 0 0 0 13a3 3 0 1 0 5.878-.851l2.654-2.617.968.968-.305.914a1 1 0 0 0 .242 1.023l3.356 3.356a1 1 0 0 0 1.414 0l1.586-1.586a1 1 0 0 0 0-1.414l-3.356-3.356a1 1 0 0 0-1.023-.242L10.5 9.5l-.96-.96 2.68-2.643A3.005 3.005 0 0 0 16 3c0-.269-.035-.53-.102-.777l-2.14 2.141L12 4l-.364-1.757L13.777.102a3 3 0 0 0-3.675 3.68L7.462 6.46 4.793 3.793a1 1 0 0 1-.293-.707v-.071a1 1 0 0 0-.419-.814L1 0zm9.646 10.646a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708zM3 11l.471.242.529.026.287.445.445.287.026.529L5 13l-.242.471-.026.529-.445.287-.287.445-.529.026L3 15l-.471-.242L2 14.732l-.287-.445L1.268 14l-.026-.529L1 13l.242-.471.026-.529.445-.287.287-.445.529-.026L3 11z" />
            </svg>
        }
        else if (context.Category == "Toy")
        {
            <svg class="text-success" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 16 16">
                <path d="M3.112 3.645A1.5 1.5 0 0 1 4.605 2H7a.5.5 0 0 1 .5.5v.382c0 .696-.497 1.182-.872 1.469a.459.459 0 0 0-.115.118.113.113 0 0 0-.012.025L6.5 4.5v.003l.003.01c.004.01.014.028.036.053a.86.86 0 0 0 .27.194C7.09 4.9 7.51 5 8 5c.492 0 .912-.1 1.19-.24a.86.86 0 0 0 .271-.194.213.213 0 0 0 .039-.063v-.009a.112.112 0 0 0-.012-.025.459.459 0 0 0-.115-.118c-.375-.287-.872-.773-.872-1.469V2.5A.5.5 0 0 1 9 2h2.395a1.5 1.5 0 0 1 1.493 1.645L12.645 6.5h.237c.195 0 .42-.147.675-.48.21-.274.528-.52.943-.52.568 0 .947.447 1.154.862C15.877 6.807 16 7.387 16 8s-.123 1.193-.346 1.638c-.207.415-.586.862-1.154.862-.415 0-.733-.246-.943-.52-.255-.333-.48-.48-.675-.48h-.237l.243 2.855A1.5 1.5 0 0 1 11.395 14H9a.5.5 0 0 1-.5-.5v-.382c0-.696.497-1.182.872-1.469a.459.459 0 0 0 .115-.118.113.113 0 0 0 .012-.025L9.5 11.5v-.003a.214.214 0 0 0-.039-.064.859.859 0 0 0-.27-.193C8.91 11.1 8.49 11 8 11c-.491 0-.912.1-1.19.24a.859.859 0 0 0-.271.194.214.214 0 0 0-.039.063v.003l.001.006a.113.113 0 0 0 .012.025c.016.027.05.068.115.118.375.287.872.773.872 1.469v.382a.5.5 0 0 1-.5.5H4.605a1.5 1.5 0 0 1-1.493-1.645L3.356 9.5h-.238c-.195 0-.42.147-.675.48-.21.274-.528.52-.943.52-.568 0-.947-.447-1.154-.862C.123 9.193 0 8.613 0 8s.123-1.193.346-1.638C.553 5.947.932 5.5 1.5 5.5c.415 0 .733.246.943.52.255.333.48.48.675.48h.238l-.244-2.855zM4.605 3a.5.5 0 0 0-.498.55l.001.007.29 3.4A.5.5 0 0 1 3.9 7.5h-.782c-.696 0-1.182-.497-1.469-.872a.459.459 0 0 0-.118-.115.112.112 0 0 0-.025-.012L1.5 6.5h-.003a.213.213 0 0 0-.064.039.86.86 0 0 0-.193.27C1.1 7.09 1 7.51 1 8c0 .491.1.912.24 1.19.07.14.14.225.194.271a.213.213 0 0 0 .063.039H1.5l.006-.001a.112.112 0 0 0 .025-.012.459.459 0 0 0 .118-.115c.287-.375.773-.872 1.469-.872H3.9a.5.5 0 0 1 .498.542l-.29 3.408a.5.5 0 0 0 .497.55h1.878c-.048-.166-.195-.352-.463-.557-.274-.21-.52-.528-.52-.943 0-.568.447-.947.862-1.154C6.807 10.123 7.387 10 8 10s1.193.123 1.638.346c.415.207.862.586.862 1.154 0 .415-.246.733-.52.943-.268.205-.415.39-.463.557h1.878a.5.5 0 0 0 .498-.55l-.001-.007-.29-3.4A.5.5 0 0 1 12.1 8.5h.782c.696 0 1.182.497 1.469.872.05.065.091.099.118.115.013.008.021.01.025.012a.02.02 0 0 0 .006.001h.003a.214.214 0 0 0 .064-.039.86.86 0 0 0 .193-.27c.14-.28.24-.7.24-1.191 0-.492-.1-.912-.24-1.19a.86.86 0 0 0-.194-.271.215.215 0 0 0-.063-.039H14.5l-.006.001a.113.113 0 0 0-.025.012.459.459 0 0 0-.118.115c-.287.375-.773.872-1.469.872H12.1a.5.5 0 0 1-.498-.543l.29-3.407a.5.5 0 0 0-.497-.55H9.517c.048.166.195.352.463.557.274.21.52.528.52.943 0 .568-.447.947-.862 1.154C9.193 5.877 8.613 6 8 6s-1.193-.123-1.638-.346C5.947 5.447 5.5 5.068 5.5 4.5c0-.415.246-.733.52-.943.268-.205.415-.39.463-.557H4.605z" />
            </svg>
        }
        else
        {
            <svg class="text-info" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 16 16">
                <path d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811V2.828zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492V2.687zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783z" />
            </svg>
        }
    </ColumnDefEx>
    <ColumnDefEx TRow="Product" Field="Name" Width="minmax(5em, auto)" />
    <ColumnDefEx TRow="Product" Field="Length" />
    <ColumnDefEx TRow="Product" Field="Width" />
    <ColumnDefEx TRow="Product" Field="Height" Width="100px" />
    <ColumnDefEx TRow="Product" Field="NullableBoolean" />
    <ColumnDef TRow="Product" Header="Volume" CellClass="text-right" Width="min-content"
               CellClassSelector="@(e => e.Data.Volume > 100 ? "bg-danger" : "bg-success")">
        @((context.Height * context.Width * context.Length / 1000).ToString("f3")) m<sup>3</sup>
    </ColumnDef>
</AdvancedGrid>

<button type="button" @onclick="Reload">Reload</button>

@code
{
    [Inject] ProductsService ProductsService { get; set; }

    bool _serverFiltering = true;
    Product[] _products;
    AdvancedGrid<Product> _grid;

    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            async void ReloadHandler()
            {
                await _grid.ReloadAsync();
                if (_serverFiltering)
                {
                    _grid.Refresh();
                    StateHasChanged();
                }
            }
            _grid.SortingModel.Descriptors.CollectionChanged += (o, e) => ReloadHandler();
            _grid.FilteringModel.Descriptors.CollectionChanged += (o, e) => ReloadHandler();

            _grid.SelectionModel.EqualityComparer = ProjectionEqualityComparer<Product>.Create(p => p.Id);
        }
    }

    private async Task Reload()
    {
        if (_serverFiltering)
        {
            if (_grid != null)
            {
                await _grid.ReloadAsync();
            }
        }
        else
        {
            _products = await ProductsService.GetProducts();
        }
    }

    private async Task ToggleMode()
    {
        _serverFiltering = !_serverFiltering;
        StateHasChanged();
        await Reload();
    }

    private async Task OnRead(ReadEventArgs<Product> args)
    {
        var dataEnvelope = await ProductsService.GetProducts(args.StartIndex, args.Count, _grid?.SortingModel.Descriptors.ToArray(), _grid?.FilteringModel.Descriptors.ToArray());
        args.Total = dataEnvelope.Total;
        args.Items = dataEnvelope.Items;
    }

    /// <summary>
    /// Update sort definitions
    /// </summary>
    async Task HeaderClicked(HeaderMouseEventArgs<Product> args)
    {
        await Reload();
    }

    /// <summary>
    /// customize operators predicate on client side filtering
    /// </summary>
    void CustomizeFilter(CreatingPredicateEventArgs<Product> args)
    {
        if (args.FilterDescriptor is FilterDescriptor filter)
        {
            args.Predicate = filter.Operator switch
            {
                "startswith" => CustomFilterPredicates.StartsWithIgnoreCase<Product>(filter.Field, (string)filter.Value),
                "contains" => CustomFilterPredicates.ContainsIgnoreCase<Product>(filter.Field, (string)filter.Value),
                _ => null
            };
        }
    }
}
